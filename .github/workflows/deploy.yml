name: Deploy to AWS Fargate

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out your repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set environment variables (ECR repo, ECS cluster/service names)
      - name: Set Environment Variables
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "ECR_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-node-app" >> $GITHUB_ENV
          echo "ECS_CLUSTER=my-node-cluster" >> $GITHUB_ENV
          echo "ECS_SERVICE=my-node-service" >> $GITHUB_ENV

      # 3. Configure AWS CLI on the runner
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # 4. Log in to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO

      # 5. Build the Docker image and push it to ECR
      - name: Build and Push Docker Image
        run: |
          docker build -t my-node-app .
          docker tag my-node-app $ECR_REPO:latest
          docker push $ECR_REPO:latest

      # 6. Update the ECS service to deploy the new image
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

      # 7. Wait for the new deployment to start (adjust sleep time as needed)
      - name: Wait for Deployment
        run: sleep 30

      # 8. Retrieve the public IP of the running task (optional, for verification)
      - name: Get Public IP of ECS Task
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query "taskArns[0]" --output text)
          echo "Task ARN: $TASK_ARN"
          NETWORK_INTERFACE_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
          echo "Network Interface ID: $NETWORK_INTERFACE_ID"
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE_ID --query "NetworkInterfaces[0].Association.PublicIp" --output text)
          echo "Public URL: http://$PUBLIC_IP:3000"
